<?php

namespace App\Helpers;

use App\Models\GatewayDetail;
use App\Models\PaymentHistory;
use DateTime;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Log;
use stdClass;

class PaymentGateway
{
    public static function proccess()
    {
        Log::info("Payment Page initiated");
        $gateway = GatewayDetail::whereNull('user_id')->first();
        $merchant_id = $gateway->merchant_id;
        $merchant_sub_id = $gateway->merchant_sub_id;
        $sign_key = $gateway->sign_key;
        $encryption_key = hash('sha256', $gateway->encryption_key, true);
        $encryption_iv = $gateway->encryption_iv;
        $token_generation_url = $gateway->token_generation_url;
        $txn_initiation_url = $gateway->txn_initiation_url;
        $feetype = "ALL FEES";

        $merchantreplyurl = "https://atdemo.online/prospect/payment_callback"; # merchant reply url to be replaced here
        // $totalamt = Auth::user()->fee?Auth::user()->fee:10;
        $totalamt = Auth::user()->entrance_fee?Auth::user()->entrance_fee->exam_fee:1;
        $merchanttxnid = time().Auth::user()->id; // unique id to be generated by merchant for each txn . Ensure to save in db.
        // $merchanttxnid = time().Auth::user()->id; // unique id to be generated by merchant for each txn . Ensure to save in db.
        $udf1 = Auth::user()->id; //any user defined value to be passed which may be used for future reference. Ex : Roll no , name , course, etc.
        $udf2 = Auth::user()->studentProfile->phone; //any user defined value to be passed which may be used for future reference. Ex : Roll no , name , course, etc.
        $udf3 = Auth::user()->email; //any user defined value to be passed which may be used for future reference. Ex : Roll no , name , course, etc.

        $decodedData = PaymentGateway::generateToken($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$token_generation_url,$totalamt,$feetype,$merchantreplyurl);
        $tokenId = $decodedData->tokenid; //ensure to save in db
        Log::info("Token Id : ".$tokenId);
        if($tokenId != NULL)
        {
            $txninitfinalString = PaymentGateway::initiateTxn($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$txn_initiation_url,$tokenId,$merchanttxnid,$udf1,$udf2,$udf3,$totalamt,$feetype);
            Log::info("txninitfinalString : ".print_r($txninitfinalString,1));
        }
        
        PaymentHistory::create([
            'token_id' => $tokenId,
            'txn_init_final' => $txninitfinalString,
            'status' => 'AWAITED',
            'user_id' => Auth::user()->id,
        ]);
       
    } 
    public static function generateToken($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$token_generation_url,$totalamt,$feetype,$merchantreplyurl){
        $paymentObject = new \stdClass();
        $paymentObject->merchantid = $merchant_id;
        $paymentObject->merchantsubid = $merchant_sub_id;
        $paymentObject->feetype = $feetype;
        $paymentObject->totalamt = $totalamt;
        $paymentObject->replyurl = $merchantreplyurl;
        
        $paymentObject->action = 'GENTOK';
        $data_string = json_encode($paymentObject);
        $data_string = PaymentGateway::pkcs5_pad($data_string,16);
			
        Log::info("gentok data string before encryption : ".$data_string);
		//$paymentData = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $encryption_key,$data_string, MCRYPT_MODE_CBC, $encryption_iv));
        $paymentData = base64_encode(openssl_encrypt ( $data_string , 'AES-256-CBC' , $encryption_key , OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv));//php 7.1 and above
        $paymentTokenObj = new \stdClass();
        $paymentTokenObj->merchantid = $merchant_id;
        $paymentTokenObj->merchantsubid = $merchant_sub_id;
        $paymentTokenObj->action = 'GENTOK';
        $paymentTokenObj->data = $paymentData;
        $hmac = strtoupper(hash_hmac('sha256', $paymentData, $sign_key));
        $paymentTokenObj->hmac = $hmac;
        $paymentTokenString = json_encode($paymentTokenObj);
        Log::info("Invoking token generation service with json : ".$paymentTokenString);
        $ch = curl_init($token_generation_url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $paymentTokenString);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                'Content-Type: application/json',
                'Content-Length: ' . strlen($paymentTokenString))
        );
        curl_setopt($ch,CURLOPT_FAILONERROR,true);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); 
        curl_setopt($ch, CURLOPT_TIMEOUT, 60); //timeout in seconds		
        curl_setopt ($ch, CURLOPT_SSLVERSION, 6); //TLS 1.2
        $result = curl_exec($ch);
        if(curl_error($ch)){
            $curl_errno= curl_errno($ch);
            Log::error("curl error : ".curl_error($ch)." errorno :".$curl_errno);
        }else{
            Log::info("response from token generation service : ".$result);
            $decodedVal = json_decode($result);
            $retData = $decodedVal->data;
            //$res = pkcs5_unpad(mcrypt_decrypt(MCRYPT_RIJNDAEL_128,$encryption_key,base64_decode($retData), MCRYPT_MODE_CBC, $encryption_iv));
            $res = PaymentGateway::pkcs5_unpad(openssl_decrypt ( base64_decode($retData) , 'AES-256-CBC' , $encryption_key ,OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv)); //php 7.1 and above
            Log::info("token generation service response after decryption: ".$res);
            $decodedData = json_decode($res);
            return $decodedData;
        }
    }
    

    public static function initiateTxn($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$txn_initiation_url,$tokenId,$merchanttxnid,$udf1,$udf2,$udf3,$totalamt,$feetype){
        $txninitObject = new \stdClass();
        $txninitObject->merchantid = $merchant_id;
        $txninitObject->merchantsubid = $merchant_sub_id;
        $txninitObject->feetype = $feetype;
        $txninitObject->totalamt = $totalamt;
        $txninitObject->action = 'TXNINIT';
        $txninitObject->tokenid = $tokenId;
        $txninitObject->merchanttxnid = $merchanttxnid; 
        $txninitObject->udf1 = $udf1; 
        $txninitObject->udf2 = $udf2; 
        $txninitObject->udf3 = $udf3; 

        $txninitdata_string = json_encode($txninitObject);
        $txninitdata_string = PaymentGateway::pkcs5_pad($txninitdata_string,16);
        Log::info("txninit data String before encryption : ".$txninitdata_string);
        //$txninitData = base64_encode(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $encryption_key,$txninitdata_string, MCRYPT_MODE_CBC, $encryption_iv));
        $txninitData = base64_encode(openssl_encrypt ( $txninitdata_string , 'AES-256-CBC' , $encryption_key , OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv));//php 7.1 and above
        $txninitfinalobj = new \stdClass();
        $txninitfinalobj->merchantid = $merchant_id;
        $txninitfinalobj->merchantsubid = $merchant_sub_id;
        $txninitfinalobj->action = 'TXNINIT';
        $txninitfinalobj->data = $txninitData;
        $hmac = strtoupper(hash_hmac('sha256', $txninitData, $sign_key));
        $txninitfinalobj->hmac = $hmac;

        $txninitfinalString = json_encode($txninitfinalobj);
        Log::info("txninit final json  : ".$txninitfinalString);
        //$txninitfinalString = str_replace("\"", "&quot;", $txninitfinalString); //to convery double quotes to &quot; before form submission 
        return $txninitfinalString;
    }

    public static function invokeTxnStatus($encryption_key,$encryption_iv,$sign_key,$merchant_id,$merchant_sub_id,$txn_status_url,$totalamt,$feetype,$tokenid){
        $paymentObject = new \stdClass;
        $paymentObject->merchantid = $merchant_id;
        $paymentObject->merchantsubid = $merchant_sub_id;
        $paymentObject->feetype = $feetype;
        $paymentObject->totalamt = $totalamt;	
        $paymentObject->action = 'TXNSTATUS';
        $paymentObject->tokenid = $tokenid;
        $data_string = json_encode($paymentObject);
        $data_string = PaymentGateway::pkcs5_pad($data_string,16);
			
		Log::info("txnstatus input data string before encryption : ".$data_string);

		$paymentData = base64_encode(openssl_encrypt ( $data_string , 'AES-256-CBC' , $encryption_key , OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv));//php 7.1 and above
        $paymentTxnStatusObj = new \stdClass;
        $paymentTxnStatusObj->merchantid = $merchant_id;
        $paymentTxnStatusObj->merchantsubid = $merchant_sub_id;
        $paymentTxnStatusObj->action = 'TXNSTATUS';
        $paymentTxnStatusObj->data = $paymentData;
        $hmac = strtoupper(hash_hmac('sha256', $paymentData, $sign_key));
        $paymentTxnStatusObj->hmac = $hmac;

		$paymentTxnStatusString = json_encode($paymentTxnStatusObj);
        Log::info(" Invoking txn status service with json : ".$paymentTxnStatusString);
        $ch = curl_init($txn_status_url);
        curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
        curl_setopt($ch, CURLOPT_POSTFIELDS, $paymentTxnStatusString);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
            'Content-Type: application/json',
            'Content-Length: ' . strlen($paymentTxnStatusString))
        );
        curl_setopt($ch,CURLOPT_FAILONERROR,true);
        curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 60); 
        curl_setopt($ch, CURLOPT_TIMEOUT, 60); //timeout in seconds		
        curl_setopt ($ch, CURLOPT_SSLVERSION, 6); //TLS 1.2
        $result = curl_exec($ch);
        if(curl_error($ch)){
   			$curl_errno= curl_errno($ch);
            Log::error(" curl error : ".curl_error($ch)." errorno :".$curl_errno);
		}
		else{
            Log::info(" response from txn status service : ".$result);
            $decodedVal = json_decode($result);
            $retData = $decodedVal->data;
            $res = PaymentGateway::pkcs5_unpad(openssl_decrypt ( base64_decode($retData) , 'AES-256-CBC' , $encryption_key ,OPENSSL_RAW_DATA | OPENSSL_NO_PADDING, $encryption_iv)); //php 7.1 and above
            Log::info(" txn status service response after decryption: ".$res);
            $decodedData = json_decode($res);
            return $decodedData;
        }
    }

    public static function pkcs5_pad($text, $blocksize){ 
        $pad = $blocksize - (strlen($text) % $blocksize); 
        return $text . str_repeat(chr($pad), $pad); 
    } 
    public static function pkcs5_unpad($text){
        //dd($text);
        $pad = ord($text[strlen($text)-1]);
        if ($pad > strlen($text)) return false; 
        if (strspn($text, chr($pad), strlen($text) - $pad) != $pad) return false; 
        return substr($text, 0, -1 * $pad); 
    }
}
